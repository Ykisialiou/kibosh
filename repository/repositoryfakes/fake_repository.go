// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"sync"

	"github.com/cf-platform-eng/kibosh/helm"
	"github.com/cf-platform-eng/kibosh/repository"
)

type FakeRepository struct {
	LoadChartsStub        func() ([]*helm.MyChart, error)
	loadChartsMutex       sync.RWMutex
	loadChartsArgsForCall []struct{}
	loadChartsReturns     struct {
		result1 []*helm.MyChart
		result2 error
	}
	loadChartsReturnsOnCall map[int]struct {
		result1 []*helm.MyChart
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) LoadCharts() ([]*helm.MyChart, error) {
	fake.loadChartsMutex.Lock()
	ret, specificReturn := fake.loadChartsReturnsOnCall[len(fake.loadChartsArgsForCall)]
	fake.loadChartsArgsForCall = append(fake.loadChartsArgsForCall, struct{}{})
	fake.recordInvocation("LoadCharts", []interface{}{})
	fake.loadChartsMutex.Unlock()
	if fake.LoadChartsStub != nil {
		return fake.LoadChartsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadChartsReturns.result1, fake.loadChartsReturns.result2
}

func (fake *FakeRepository) LoadChartsCallCount() int {
	fake.loadChartsMutex.RLock()
	defer fake.loadChartsMutex.RUnlock()
	return len(fake.loadChartsArgsForCall)
}

func (fake *FakeRepository) LoadChartsReturns(result1 []*helm.MyChart, result2 error) {
	fake.LoadChartsStub = nil
	fake.loadChartsReturns = struct {
		result1 []*helm.MyChart
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) LoadChartsReturnsOnCall(i int, result1 []*helm.MyChart, result2 error) {
	fake.LoadChartsStub = nil
	if fake.loadChartsReturnsOnCall == nil {
		fake.loadChartsReturnsOnCall = make(map[int]struct {
			result1 []*helm.MyChart
			result2 error
		})
	}
	fake.loadChartsReturnsOnCall[i] = struct {
		result1 []*helm.MyChart
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadChartsMutex.RLock()
	defer fake.loadChartsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.Repository = new(FakeRepository)
